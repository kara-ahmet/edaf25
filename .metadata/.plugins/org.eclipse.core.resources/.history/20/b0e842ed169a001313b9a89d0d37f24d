package dfsvariants;
import graph.Graph;
import digraph.DiGraph.*;
import java.util.Stack;


public class DFS {
	
	public <V,E> void IterativeDFS1(Graph.Vertex<V,E> v) {
		v.visit();
		Stack<Graph.Vertex<V,E>> stack = 
			new Stack<Graph.Vertex<V,E>>();
		stack.push(v);
		while (!stack.isEmpty()) {
			Graph.Vertex<V,E> w = stack.pop();
			System.out.println("pop: " + w);
			if (!w.isVisited()) {
				w.visit();
				System.out.println("visiting: " + w);
				for (Graph.Edge<V,E> e : w) {
					stack.push(e.destination());
				}
			}
		}
	}
	
	public static void main(String[] args) {
		DiGraph<String.Integer> g = new DiGraph<String.Integer>();
	}

}
