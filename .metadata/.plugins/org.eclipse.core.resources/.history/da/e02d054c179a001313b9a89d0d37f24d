package dfsvariants;
import graph.Graph;
import digraph.DiGraph;
import java.util.Stack;


public class DFS {
	
	public static <V,E> void IterativeDFS1(Graph.Vertex<V,E> v) {
		v.visit();
		Stack<Graph.Vertex<V,E>> stack = 
			new Stack<Graph.Vertex<V,E>>();
		stack.push(v);
		while (!stack.isEmpty()) {
			Graph.Vertex<V,E> w = stack.pop();
			System.out.println("pop: " + w);
			if (!w.isVisited()) {
				w.visit();
				System.out.println("visiting: " + w);
				for (Graph.Edge<V,E> e : w) {
					stack.push(e.destination());
				}
			}
		}
	}
	
	public static void main(String[] args) {
		Graph<String,Integer> g = new DiGraph<String,Integer>();
		Graph.Vertex<String,Integer> a = g.addVertex("a");
		Graph.Vertex<String,Integer> b = g.addVertex("b");
		Graph.Vertex<String,Integer> c = g.addVertex("c");
		Graph.Vertex<String,Integer> d = g.addVertex("d");
		g.addEdge(1,a,b);
		g.addEdge(2,a,c);
		g.addEdge(3,b,d);
		g.addEdge(4,c,d);
		IterativeDFS1(g);
		
	}

}
